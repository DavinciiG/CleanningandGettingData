a <-available.package()
a <- available.packages()
a
head(rownames(a), 3)
install.packages("slidify")
install.packages("slidify")
install.packages("KernSmooth")
library(Kernsmooth)
library(KernSmooth)
find.package("devtools")
install.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
ls
library(datasets)
ls
data(iris)
?iris
sapply(split(iris$Sepal.Length, iriss$Species), mean)
sapply(split(iris$Sepal.Length, iris$Species), mean)
data(mtcars)
tapply(mtcars$cyl, mtcars$mpg, mean)
with(mtcars, tapply(mpg, cyl, mean))
install.packages("swirl")
library(swirl)
swirl()
5 +7
x <- 5+7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2+100
my_sqrt <-sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
1:20
pi:10
15:1
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq).
seq(along = my_seq)
seq_along(my_seq)
rep(0,times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my-char <- c("My", "name", "is")
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name<-c(my_char, "David")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X","Y","Z"), sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
is.na(my_data)
my_nais.na(my_data)
my_na<-is.na(my_data)
my_na
my_data == NA
sum(my_na )
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
c(x[3],x[5],x[7])
x[c(3, 5, 7)]
x (i.e. x[0])
x (x[0])
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
ect <- c(foo = 11, bar = 2, norf = NA)
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2<-c(11, 2, NA)
names(vect2) <-c("foo", "bar", "norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
c("Bill", "Gina", "Kelly", "Sean")
patiens <- c("Bill", "Gina", "Kelly", "Sean")
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c( "patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
g <-nlme
?nlme
library(nlme)
library(nlme)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
data()
data(nlme)
library(nlme)
data()
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
?ggplot
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
fileurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
dowload.file(fileurl,"./Project1")
download.file(fileurl,"./Project1")
close
source('C:/Users/David/Desktop/Data Analisys Sp/Gettingandcleaning/Project1/run_analysis.R')
setwd("./UCI HAR Dataset")*
)
setwd("./UCI HAR Dataset")
setwd("../UCI HAR Dataset")
setwd("./UCI HAR Dataset")
setwd("C:/Users/David/Desktop/Data Analisys Sp/Gettingandcleaning/Project1/UCI HAR Dataset")
setwd("./UCI HAR Dataset")
setwd("./UCI HAR Dataset")
setwd("./UCI HAR Dataset")
setwd("./UCI HAR Dataset")
setwd("./UCI HAR Dataset")
### Now Lets Merge the training and test sets
Txtrain <- read.table("train/X_train.txt")
Txtest <- read.table("test/X_test.txt")
Xval <- rbind(Txtrain, Txtest)
Tytrain <- read.table("train/y_train.txt")
Tytest <- read.table("test/y_test.txt")
Yval <- rbind(Tytrain, Tytest)
Tsubtrain <- read.table("train/subject_train.txt")
Tsubtest <- read.table("test/subject_test.txt")
Subval <- rbind(Tsubtrain, Tsubtest)
#------------------------------------------------------
## Extracts mean and standard deviation for each measurement.
feat <- read.table("features.txt")
Indgoodfeat <- grep("-mean\\(\\)|-std\\(\\)", feat[, 2])
Xval <- Xval[, Indgoodfeat]
names(Xval) <- feat[Indgoodfeat, 2]
names(Xval) <- gsub("\\(|\\)", "", names(Xval))
names(Xval) <- tolower(names(Xval))
#------------------------------------------------------
## Uses descriptive activity labels to name the activities in the data set.
activ <- read.table("activity_labels.txt")
activ[, 2] = gsub("_", "", tolower(as.character(activ[, 2])))
Yval[,1] = activ[Yval[,1], 2]
names(Yval) <- "activity"
#------------------------------------------------------
## Appropriately labels the data set with descriptive activity names.
names(Subval) <- "subject"
cleandata <- cbind(Subval, Yval, Xval)
write.table(cleandata, "merge_data_1set.txt")
## Create a 2nd, independent data set with the average of each variable
## for each activity and each subject.
USubject = unique(Subval)[,1]
nSub = length(unique(Subval)[,1])
nActiv= length(activ[,1])
nCols = dim(cleandata)[2]
result = cleandata[1:(nSub*nActiv), ]
row = 1 # row counter initialisation
for (i in 1:USubject) {
for (j in 1:numActivities) {
fresult[row, 1] = USubject[s]
fresult[row, 2] = activ[j, 2]
temp <- cleandata[cleandata$subject==i & cleandata$activity==activs[j, 2], ]
result[row, 3:numCols] <- colMeans(tmp[, 3:numCols])
row = row+1
}
}
write.table(fresult, "final_data_2set.txt")
Txtrain <- read.table("train/X_train.txt")
Txtest <- read.table("test/X_test.txt")
Xval <- rbind(Txtrain, Txtest)
Tytrain <- read.table("train/y_train.txt")
Tytest <- read.table("test/y_test.txt")
Yval <- rbind(Tytrain, Tytest)
Tsubtrain <- read.table("train/subject_train.txt")
Tsubtest <- read.table("test/subject_test.txt")
Subval <- rbind(Tsubtrain, Tsubtest)
#------------------------------------------------------
## Extracts mean and standard deviation for each measurement.
feat <- read.table("features.txt")
Indgoodfeat <- grep("-mean\\(\\)|-std\\(\\)", feat[, 2])
Xval <- Xval[, Indgoodfeat]
names(Xval) <- feat[Indgoodfeat, 2]
names(Xval) <- gsub("\\(|\\)", "", names(Xval))
names(Xval) <- tolower(names(Xval))
#------------------------------------------------------
## Uses descriptive activity labels to name the activities in the data set.
activ <- read.table("activity_labels.txt")
activ[, 2] = gsub("_", "", tolower(as.character(activ[, 2])))
Yval[,1] = activ[Yval[,1], 2]
names(Yval) <- "activity"
#------------------------------------------------------
## Appropriately labels the data set with descriptive activity names.
names(Subval) <- "subject"
cleandata <- cbind(Subval, Yval, Xval)
write.table(cleandata, "merge_data_1set.txt")
## Create a 2nd, independent data set with the average of each variable
## for each activity and each subject.
USubject = unique(Subval)[,1]
nSub = length(unique(Subval)[,1])
nActiv= length(activ[,1])
nCols = dim(cleandata)[2]
result = cleandata[1:(nSub*nActiv), ]
row = 1 # row counter initialisation
for (i in 1:USubject) {
for (j in 1:nActiv) {
fresult[row, 1] = USubject[s]
fresult[row, 2] = activ[j, 2]
temp <- cleandata[cleandata$subject==i & cleandata$activity==activ[j, 2], ]
fresult[row, 3:numCols] <- colMeans(tmp[, 3:numCols])
row = row+1
}
}
write.table(fresult, "final_data_2set.txt")
Txtrain <- read.table("train/X_train.txt")
Txtest <- read.table("test/X_test.txt")
Xval <- rbind(Txtrain, Txtest)
Tytrain <- read.table("train/y_train.txt")
Tytest <- read.table("test/y_test.txt")
Yval <- rbind(Tytrain, Tytest)
Tsubtrain <- read.table("train/subject_train.txt")
Tsubtest <- read.table("test/subject_test.txt")
Subval <- rbind(Tsubtrain, Tsubtest)
#------------------------------------------------------
## Extracts mean and standard deviation for each measurement.
feat <- read.table("features.txt")
Indgoodfeat <- grep("-mean\\(\\)|-std\\(\\)", feat[, 2])
Xval <- Xval[, Indgoodfeat]
names(Xval) <- feat[Indgoodfeat, 2]
names(Xval) <- gsub("\\(|\\)", "", names(Xval))
names(Xval) <- tolower(names(Xval))
#------------------------------------------------------
## Uses descriptive activity labels to name the activities in the data set.
activ <- read.table("activity_labels.txt")
activ[, 2] = gsub("_", "", tolower(as.character(activ[, 2])))
Yval[,1] = activ[Yval[,1], 2]
names(Yval) <- "activity"
#------------------------------------------------------
## Appropriately labels the data set with descriptive activity names.
names(Subval) <- "subject"
cleandata <- cbind(Subval, Yval, Xval)
write.table(cleandata, "merge_data_1set.txt")
## Create a 2nd, independent data set with the average of each variable
## for each activity and each subject.
USubject = unique(Subval)[,1]
nSub = length(unique(Subval)[,1])
nActiv= length(activ[,1])
nCols = dim(cleandata)[2]
result = cleandata[1:(nSub*nActiv), ]
row = 1 # row counter initialisation
for (i in 1:USubject) {
for (j in 1:nActiv) {
fresult[row, 1] = USubject[i]
fresult[row, 2] = activ[j, 2]
temp <- cleandata[cleandata$subject==i & cleandata$activity==activ[j, 2], ]
fresult[row, 3:numCols] <- colMeans(tmp[, 3:numCols])
row = row+1
}
}
write.table(fresult, "final_data_2set.txt")
?result
??result
row = 1 # row counter initialisation
for (i in 1:USubject) {
for (j in 1:nActiv) {
result[row, 1] = USubject[i]
result[row, 2] = activ[j, 2]
temp <- cleandata[cleandata$subject==i & cleandata$activity==activ[j, 2], ]
result[row, 3:numCols] <- colMeans(tmp[, 3:numCols])
row = row+1
}
}
write.table(result, "final_data_2set.txt")
row = 1 # row counter initialisation
for (i in 1:USubject) {
for (j in 1:nActiv) {
result[row, 1] = USubject[i]
result[row, 2] = activ[j, 2]
temp <- cleandata[cleandata$subject==i & cleandata$activity==activ[j, 2], ]
result[row, 3:numCols] <- colMeans(temp[, 3:numCols])
row = row+1
}
}
write.table(result, "final_data_2set.txt")
?colMeans
row = 1 # row counter initialisation
for (i in 1:USubject) {
for (j in 1:nActiv) {
result[row, 1] = USubject[i]
result[row, 2] = activ[j, 2]
temp <- cleandata[cleandata$subject==i & cleandata$activity==activ[j, 2], ]
result[row, 3:nCols] <- colMeans(temp[, 3:numCols])
row = row+1
}
}
write.table(result, "final_data_2set.txt")
row = 1 # row counter initialisation
for (i in 1:USubject) {
for (j in 1:nActiv) {
result[row, 1] = USubject[i]
result[row, 2] = activ[j, 2]
temp <- cleandata[cleandata$subject==i & cleandata$activity==activ[j, 2], ]
result[row, 3:nCols] <- colMeans(temp[, 3:nCol])
row = row+1
}
}
write.table(result, "final_data_2set.txt")
row = 1 # row counter initialisation
for (i in 1:USubject) {
for (j in 1:nActiv) {
result[row, 1] = USubject[i]
result[row, 2] = activ[j, 2]
temp <- cleandata[cleandata$subject==i & cleandata$activity==activ[j, 2], ]
result[row, 3:nCols] <- colMeans(temp[, 3:nCols])
row = row+1
}
}
write.table(result, "final_data_2set.txt")
Txtrain <- read.table("train/X_train.txt")
Txtest <- read.table("test/X_test.txt")
Xval <- rbind(Txtrain, Txtest)
Tytrain <- read.table("train/y_train.txt")
Tytest <- read.table("test/y_test.txt")
Yval <- rbind(Tytrain, Tytest)
Tsubtrain <- read.table("train/subject_train.txt")
Tsubtest <- read.table("test/subject_test.txt")
Subval <- rbind(Tsubtrain, Tsubtest)
#------------------------------------------------------
## Extracts mean and standard deviation for each measurement.
feat <- read.table("features.txt")
Indgoodfeat <- grep("-mean\\(\\)|-std\\(\\)", feat[, 2])
Xval <- Xval[, Indgoodfeat]
names(Xval) <- feat[Indgoodfeat, 2]
names(Xval) <- gsub("\\(|\\)", "", names(Xval))
names(Xval) <- tolower(names(Xval))
#------------------------------------------------------
## Uses descriptive activity labels to name the activities in the data set.
activ <- read.table("activity_labels.txt")
activ[, 2] = gsub("_", "", tolower(as.character(activ[, 2])))
Yval[,1] = activ[Yval[,1], 2]
names(Yval) <- "activity"
#------------------------------------------------------
## Appropriately labels the data set with descriptive activity names.
names(Subval) <- "subject"
cleandata <- cbind(Subval, Yval, Xval)
write.table(cleandata, "merge_data_1set.txt")
## Create a 2nd, independent data set with the average of each variable
## for each activity and each subject.
USubject = unique(Subval)[,1]
nSub = length(unique(Subval)[,1])
nActiv= length(activ[,1])
nCols = dim(cleandata)[2]
result = cleandata[1:(nSub*nActiv), ]
row = 1 # row counter initialisation
for (i in 1:USubject) {
for (j in 1:nActiv) {
result[row, 1] = USubject[i]
result[row, 2] = activ[j, 2]
temp <- cleandata[cleandata$subject==i & cleandata$activity==activ[j, 2], ]
result[row, 3:nCols] <- colMeans(temp[, 3:nCols])
row = row+1
}
}
write.table(result, "final_data_2set.txt")
install.packages("kini")
install.packages(c("httr", "jsonlite", "KernSmooth"))
install.packages("knitr")
install.packages("pandoc")
install.packages("rmarkdown")
"final\_data\_2set.text" contains the final data set that is presented as a final result
"merge_data_1set.txt" contains the  data set created by the script for the 4 stept.
"merge data 1set.txt" contains the  data set created by the script for the 4 stept.
_final data 2set.txt_ contains the final data set that is presented as a final result
*merge data 1set.txt* contains the  data set created by the script for the 4 stept.
